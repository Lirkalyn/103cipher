#!/usr/bin/env python3
##
## EPITECH PROJECT, 2019
## 102architect.py
## File description:
## you can say what you what, enigma was great-desu
##

import sys
import math

if (len(sys.argv) > 3 and sys.argv[3] == '0'):
    lenght = len(sys.argv[2])
    #print("%d", lenght)
    size = 1
    while (size ** 2 < lenght):
        size += 1
    key_matrix = [[0] * size for i in range(size)]
    pos = 0
    for i in range(size):
        for j in range(size):
            try:
                key_matrix[i][j] = ord(sys.argv[2][pos])
                pos += 1
            except:
                pass
    print("Key matrix:")
    for i in range(size):
        for j in range(size):
            if (j == (size - 1)):
                print("%d" % key_matrix[i][j], end = '')
            else:
                print("%d" % key_matrix[i][j], end = '\t')
        print("\n", end = '')
    print("\n", end = '')
    print("Encrypted message:")
    pos = 0
    message_size = int((len(sys.argv[1]) / size) + 1)
    message_matrix = [[0] * size for i in range(message_size)]
    for i in range(message_size):
        for j in range(size):
            try:
                message_matrix[i][j] = ord(sys.argv[1][pos])
                pos += 1
            except:
                pass
            """
    for i in range(message_size):
        for j in range(size):
#            print("i = %d et j = %d et pos = %d" % (i, j, 0))
            if ((i == (message_size - 1)) and (j == (size - 1))):
                print("%d" % message_matrix[i][j], end = '\n')
            else:
                print("%d" % message_matrix[i][j], end = ' ')
                """
    crypt_message_matrix = [[0] * size for i in range(message_size)]

    #print(key_matrix[1][0]) = 101 i = verticale et j = horizontale
    for i in range(message_size):
        for j in range(size):
            for k in range(size):
                crypt_message_matrix[i][j] += (message_matrix[i][k]*key_matrix[k][j])
            #    print("(%d * %d) + " % (message_matrix[i][k], key_matrix[k][j]), end = '')
            #print("")
                #print("(%d * %d) + (%d * %d) + (%d * %d)" % (message_matrix[i][0], key_matrix[0][j], message_matrix[i][1], key_matrix[1][j], message_matrix[i][2], key_matrix[2][j]))
            #crypt_message_matrix[i][j] = message_matrix[i][1]#(message_matrix[i][0] * key_matrix[j][0]) + (message_matrix[i][1] * key_matrix[j][1]) + (message_matrix[i][2] * key_matrix[j][2])
            #crypt_message_matrix[i][j] = """("""(message_matrix[i][0] * key_matrix[0][j]) #+ (message_matrix[i][1] * key_matrix[1][j]) (message_matrix[i][2] * key_matrix[2][j]))

    for i in range(message_size):
        for j in range(size):
#            print("i = %d et j = %d et pos = %d" % (i, j, 0))
            if ((i == (message_size - 1)) and (j == (size - 1))):
                print("%d" % crypt_message_matrix[i][j], end = '\n')
            else:
                print("%d" % crypt_message_matrix[i][j], end = ' ')
        #print("\n", end = '')
    #print(message_size)
    #print((len(sys.argv[1]) / size))
    #print("%d" % key_matrix[0][0])
else:
    sys.exit(84)