#!/usr/bin/env python3
##
## EPITECH PROJECT, 2019
## 102architect.py
## File description:
## you can say what you what, enigma was great-desu
##

import sys
import math

if (len(sys.argv) > 3 and sys.argv[3] == '0'):
    lenght = len(sys.argv[2])
    size = 1
    while (size ** 2 < lenght):
        size += 1
    key_matrix = [[0] * size for i in range(size)]
    pos = 0
    for i in range(size):
        for j in range(size):
            try:
                key_matrix[i][j] = ord(sys.argv[2][pos])
                pos += 1
            except:
                pass
    print("Key matrix:")
    for i in range(size):
        for j in range(size):
            if (j == (size - 1)):
                print("%d" % key_matrix[i][j], end = '')
            else:
                print("%d" % key_matrix[i][j], end = '\t')
        print("\n", end = '')
    print("\n", end = '')
    print("Encrypted message:")
    pos = 0
    message_size = int((len(sys.argv[1]) / size) + 1)
    message_matrix = [[0] * size for i in range(message_size)]
    for i in range(message_size):
        for j in range(size):
            try:
                message_matrix[i][j] = ord(sys.argv[1][pos])
                pos += 1
            except:
                pass
    crypt_message_matrix = [[0] * size for i in range(message_size)]
    for i in range(message_size):
        for j in range(size):
            for k in range(size):
                crypt_message_matrix[i][j] += (message_matrix[i][k]*key_matrix[k][j])
    for i in range(message_size):
        for j in range(size):
            if ((i == (message_size - 1)) and (j == (size - 1))):
                print("%d" % crypt_message_matrix[i][j], end = '\n')
            else:
                print("%d" % crypt_message_matrix[i][j], end = ' ')
elif (len(sys.argv) > 3 and sys.argv[3] == '1'):
    if (len(sys.argv[2]) <= 4):
        lenght = len(sys.argv[2])
        size = 1
        while (size ** 2 < lenght):
            size += 1
        key_matrix = [[0] * size for i in range(size)]
        pos = 0
        for i in range(size):
            for j in range(size):
                try:
                    key_matrix[i][j] = ord(sys.argv[2][pos])
                    pos += 1
                except:
                    pass
        det = ((key_matrix[0][0] * key_matrix[1][1]) - (key_matrix[0][1] * key_matrix[1][0]))
        if (det == 0):
            sys.exit(84)
        else:
            inv_matrix = [[0] * size for i in range(size)]
            inv_matrix[0][0] = (key_matrix[1][1] / det)
            inv_matrix[0][1] = ((-key_matrix[0][1]) / det)
            inv_matrix[1][0] = ((-key_matrix[1][0]) / det)
            inv_matrix[1][1] = (key_matrix[0][0] / det)
    """
    lenght = len(sys.argv[2])
    size = 1
    while (size ** 2 < lenght):
        size += 1
    key_matrix = [[0] * size for i in range(size)]
    commatrix = [[0] * size for i in range(size)]
    pos = 0
    for i in range(size):
        for j in range(size):
            try:
                key_matrix[i][j] = ord(sys.argv[2][pos])
                pos += 1
            except:
                pass
    for i in range(size):
        for j in range(size):
            if (i != j and j != i):
                print("i = %d et j = %d, %d" %(i, j, key_matrix[i][j]))
                """
    """
    print("Key matrix:")
    for i in range(size):
        for j in range(size):
            if (j == (size - 1)):
                print("%d" % key_matrix[i][j], end = '')
            else:
                print("%d" % key_matrix[i][j], end = '\t')
        print("\n", end = '')
    print("\n", end = '')
    """
else:
    sys.exit(84)